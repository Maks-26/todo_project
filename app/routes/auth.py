# –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ª–æ–≥–∏–Ω–∞
# app/routes/auth.py ‚Äî –≠–Ω–¥–ø–æ–∏–Ω—Ç /login

from fastapi import APIRouter, Depends, HTTPException, Query
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session

from app.auth import authenticate_user
from app.dependencies import get_current_user, get_db
from app.models import User
from app.schemas import RoleEnum, Token, UserCreate, UserResponse
from app.services import create_user
from app.utils.jwt_token import create_access_token
from utils.logger import log_error, log_info

router = APIRouter()


# üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.post("/register", response_model=Token)
def register(
    user_data: UserCreate,
    db: Session = Depends(get_db),
    role: RoleEnum = Query(
        RoleEnum.user,
        description=(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "- **user** ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,"
            " –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏\n"
            "- **admin** ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞—á–∞–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        ),
    ),
):
    try:
        user = create_user(db, user_data, role)
        log_info(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.email} —Å —Ä–æ–ª—å—é {user.role}"
        )
    except ValueError as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: email '{user_data.username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        raise HTTPException(status_code=400, detail=str(e))

    token = create_access_token({"sub": user.email})
    return {"access_token": token, "token_type": "bearer"}


# üîë –õ–æ–≥–∏–Ω (—Å–æ–≤–º–µ—Å—Ç–∏–º —Å OAuth2PasswordRequestForm)
@router.post("/login", response_model=Token)
def login(
    form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)
):
    user = authenticate_user(db, form_data.username, form_data.password)
    if isinstance(user, str):
        log_error(f"‚ùå –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {user}")
        raise HTTPException(status_code=401, detail=user)

    token = create_access_token({"sub": user.email})
    log_info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É: {user.email}")
    return {"access_token": token, "token_type": "bearer"}


# üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@router.get("/me", response_model=UserResponse)
def read_users_me(current_user: User = Depends(get_current_user)):
    return current_user
